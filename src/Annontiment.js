import React, { useState } from 'react';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import { useItem } from './ItemContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è item
import axios from 'axios'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º axios
import { db } from './firebase'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç db –∏–∑ —Ñ–∞–π–ª–∞ firebase.js
import { getDoc, doc } from 'firebase/firestore';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import noImage from './no-image.jpg';



const Annontiment = () => {
  const { item } = useItem(); // –ü–æ–ª—É—á–∞–µ–º item –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [rejectReason, setRejectReason] = useState(''); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

  const sendTokenAndNotificationToServer = async (title, body, token) => {
    try {
      const url = 'http://bulletin-board.online/notification';
      const response = await axios.post(url, {
        token: token,
        title: title,
        body: body
      });
      console.log('Response from server:', response.data);
    } catch (error) {
      console.error('Error sending token and notification:', error);
    }
  };

  const handlePublish = async () => {
    var title = "üéâ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! üéâ";
    var body = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
    
    –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –Ω–∞—à–µ–π –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    
    –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Ä–µ—Å—É—Ä—Å–µ. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    –° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,
    –ö–æ–º–∞–Ω–¥–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`;
    if (item) {
      const uid = item.uid;
      console.log('uid =', uid);
      const docRef = doc(db, 'users', uid); // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ 'users'
      const docSnapshot = await getDoc(docRef); // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ getDoc
      if (docSnapshot.exists()) {
        const userData = docSnapshot.data();
        const token = userData.token;
        sendTokenAndNotificationToServer(title, body, token);
        console.log('Publish clicked');
      } else {
        console.log('No such document!');
      }
    }
  };

  const formatCurrency = (amount) => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –∫–∞–∫ –≤–∞–ª—é—Ç—ã
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB'
    }).format(amount);
  };

  const handleReject = async () => {
    var title = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!";
    var body = rejectReason;
    if (item) {
      const uid = item.uid;
      console.log('uid =', uid);
      const docRef = doc(db, 'users', uid); // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ 'users'
      const docSnapshot = await getDoc(docRef); // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ getDoc
      if (docSnapshot.exists()) {
        const userData = docSnapshot.data();
        const token = userData.token;
        sendTokenAndNotificationToServer(title, body, token);
        console.log('Reject clicked. Reason:', rejectReason);
      } else {
        console.log('No such document!');
      }
    }
  };

  if (!item) {
    return <p>No item found</p>;
  }

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1
  };

  const images = [item.mainImage, item.image2, item.image3]
    .filter(image => image && image.trim() !== '' && image.startsWith('http'))
    .map(image => image.startsWith('http') ? image : noImage);
    
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ
  const filledImages = [...images, ...Array(3 - images.length).fill(noImage)];

  return (
    <div>
      <div style={{ display: 'flex' }}>
        <div style={{ width: '400px', height: '400px' }}>
          <Slider {...settings}>
            {filledImages.map((image, index) => (
              <div key={index}>
                <img src={image} alt={`Image ${index + 1}`} style={{ maxWidth: '100%', maxHeight: '100%' }} />
              </div>
            ))}
          </Slider>
        </div>
        <div style={{ flex: '1', marginLeft: '10px' }}>
          <TextField
            label="Title"
            value={item.title}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap' // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
              }
            }}
          />
          <TextField
            label="Category"
            value={item.category}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap' // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
              }
            }}
          />
          <TextField
            label="Time"
            value={new Date(parseInt(item.time)).toLocaleString()}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap'
              }
            }}
          />
          <TextField
            label="Address"
            value={`${item.country}, ${item.city}, ${item.index}`}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap'
              }
            }}
          />
          <TextField
            label="Telephone number"
            value={item.tel}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap' // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
              }
            }}
          />
          <TextField
            label="Email address"
            value={item.email}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap' // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
              }
            }}
          />
          <TextField
            label="Description"
            value={item.description}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline // –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap' // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
              }
            }}
          />
          <TextField
            label="Price"
            value={formatCurrency(item.price)}
            InputLabelProps={{ shrink: true }}
            fullWidth
            readOnly
            multiline
            sx={{ marginTop: '10px' }}
            InputProps={{
              style: {
                whiteSpace: 'pre-wrap'
              }
            }}
          />
        </div>
      </div>
      <div style={{ textAlign: 'center', marginTop: '20px' }}>
        {/* <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
          value={rejectReason}
          onChange={(e) => setRejectReason(e.target.value)}
        /> */}
        <TextField
          label="Reason for rejection"
          type="text"
          placeholder="Enter the reason for rejection if needed"
          InputLabelProps={{ shrink: true }}
          value={rejectReason}
          onChange={(e) => setRejectReason(e.target.value)}
          fullWidth
          required
          sx={{ marginTop: '10px' }}
        />
      </div>
      <div style={{ textAlign: 'center', marginTop: '20px' }}>
        <Button type="submit" variant="contained" color="primary" sx={{ width: '100%' }} onClick={handlePublish}>PUBLISH</Button>
        <Button type="submit" variant="contained" color="primary" sx={{ marginTop: '10px', width: '100%' }} onClick={handleReject}>REJECT</Button>
      </div>
    </div>
  );
};

export default Annontiment;
